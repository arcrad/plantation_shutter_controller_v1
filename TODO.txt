firmware:
+re-implement code using nrf52840 via bluetooth low energy
+investigate issue where arduino reports "false" current position readings after a long time active or possibly after doing multiple re-calibration routines 
	--20230608: issue seems to present after some time connected even without a re-calibration (offset appears to be about 40%)
+add additional error state reporting from arduino
+investigate issue where motor tries to seek "random" position after additional re calibration routine complete (possibly trying to seek old target value?)
+consider implmenting esphome decide on esp8266 instead of esp32 (esp32 is overkill here as its basically just SPI bridge) 
+return error when position is requested and not currently calibrated (arduino)
-make arduino turn off motor a few seconds after a do_seek command is completed (allow freewheeling in between seek attempts)
	--20230622: latest arduino motor controller code implements a timeout after seek
-add manual controls for forward/backward stop and setting calibration status

hardware:
+update hardware based around nrf52840
-figure out solution for battery power/charging 
	--20230622: built initial version of lipo battery back and charge controller (uses 3 18650s and off-the-shelf charge controller)
-create new d-shaft pulley
	--20230622: printed new d-shaft pulley 
-create new case/base-plate 
	--20230622: printed new base-plate and cover without servo/clutch mechanism features

administrative:
+clean up YAML for esphome device
	+ensure secret values are kept secret/scrubbed from repo
+clean up custom component code
+clean up arduino code
+clean up git repo 
+make git repo public
+add instructions/readme/documentation to repo
	+esphome setup
	+arduino setup
	+hardware description
	+HA setup
	+other important stuff

long term/lofty:
+investigate if possible to re-implement arduino side of code (motor managemant) directly on esp32/8266
	+how fast can interrupts be handled?
	+can it keep track of motor position accurately?
+implement auto-calibration feature that finds PID values in-situ 
	+possibly also allow custom PID values via SPI or directly from ESP if motor control is ported to ESP 

