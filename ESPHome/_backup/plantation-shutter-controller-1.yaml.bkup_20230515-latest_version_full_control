esphome:
  name: plantation-shutter-controller-1
  friendly_name: Plantation Shutter Controller 1

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "8pyTcO2dB4uwA33FvFH1QzwoLsv3zn+wV55qfPvAaFY="

ota:
  password: "d2c01dcc7cfc91cbf864dd3085ec8173"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Plantation-Shutter-Controller-1"
    password: "2bf7vmY2ECm2"

captive_portal:

globals:
  - id: motor_running
    type: bool
    restore_value: no
    initial_value: 'false'
#  - id: cur_time
#    type: int
#    restore_value: no
#    initial_value: '0'
  - id: motor_run_start_time_seconds
    type: float
    restore_value: no
    initial_value: '0'
  #- id: motor_adc_voltage_zero_point
  #  type: float
  #  restore_value: no
  #  initial_value: '0'

interval:
  - interval: 0ms
    then:
      - lambda: |-
          if( id(motor_running) && id(motor_total_pulses).state >= id(one_rotation_counts).state) {
            id(drv_enable).turn_off();
            id(motor_running) = false;
          }

sensor:
  - platform: pulse_counter
    pin: 34
    id: motor_pulse_counter
    name: "Motor Pulse Counter"
    unit_of_measurement: "pulses/second"
    update_interval: 0ms
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    filters:
      #- sliding_window_moving_average:
      #    window_size: 10
      #    send_every: 10
      #    send_first_at: 10
      #- multiply: 0.01667
      - multiply: 0.00001667
      #- multiply: 0.00062
      #- multiply: 0.00055
      #- multiply: 0.005
    total:
      id: motor_total_pulses
      name: "Total Motor Pulses"
    on_value:
      then:
    #    - lambda: |-
    #        if(!id(motor_running)) {
    #          id(motor_adc_voltage_zero_point) = x;
    #        }
    #    - lambda: |-
    #        if(!id(motor_running)) {
    #          id(motor_voltage_offset_at_zero) = (id(system_voltage).state/2) - x;
    #        }
    #    - sensor.template.publish:
    #        id: sensor_motor_adc_voltage_zero_point
    #        state: !lambda 'return id(motor_adc_voltage_zero_point);'
        - sensor.template.publish:
            id: sensor_motor_run_start_time
            state: !lambda 'return id(motor_run_start_time_seconds);'
    #    #- sensor.template.publish:
    #    #    id: sensor_motor_amps
    #    #    #state: !lambda 'return (36 * (x/id(system_voltage).state)) - 18;'
    #    #    state: !lambda 'return (36 * ((x)/(id(motor_adc_voltage_zero_point)*2))) - 18;'
    #    - sensor.template.publish:
    #        id: sensor_motor_amps
    #        #state: !lambda 'return (36 * (x/id(system_voltage).state)) - 18;'
    #        state: !lambda |-
    #          float ZCV = id(motor_voltage_offset_at_zero) + x; 
    #          float VCCO = id(system_voltage).state/36.7;
    #          float FP = ZCV/VCCO;
    #          float SP = id(system_voltage).state/2;
    #          return (36.6 * ((ZCV)/(id(system_voltage).state))) - 18.3;
    #          //return (36.7 * ((ZCV)/(id(system_voltage).state))) - 18.3;
    #          //return FP - SP;
        - lambda: |-
            auto cur_time = millis()/100;
            if(id(motor_running) && x < 0 && ( id(motor_run_start_time_seconds) + 10 < cur_time) ) {
              id(sensor_motor_stopped_ms).publish_state(cur_time);
              id(motor_running) = false;
              id(drv_enable).turn_off();
            }
            //else if ( id(motor_total_pulses).state >= id(one_rotation_counts).state) {
            //  id(motor_running) = false;
            //  id(drv_enable).turn_off();
            //}
            else if( id(motor_run_start_time_seconds) + 50 < cur_time ) {
              id(motor_running) = false;
              id(drv_enable).turn_off();
            }
  #- platform: integration
  #  id: sensor_motor_pulse_integration
  #  name: "Total Motor Pulses"
  #  sensor: motor_pulse_counter
  #  time_unit: ms
  - platform: template
    id: sensor_motor_run_start_time
    name: Motor Run Start Time
    unit_of_measurement: 's'
    accuracy_decimals: 3
    update_interval: 0.1s
  - platform: template
    id: sensor_motor_stopped_ms
    name: Motor Stopped
    unit_of_measurement: 's'
    accuracy_decimals: 3
    update_interval: 0.1s

binary_sensor:
  - platform: template
    name: "Motor Is Running?"
    lambda: 'return id(motor_running);'

#binary_sensor:
#  - platform: gpio
#    name: "Living Room Window"
#    pin:
#      number: 4 #warning! strapping pin
#      inverted: true
#      mode:
#        input: true
#        pullup: true

select:
  - platform: template
    name: "Cover State"
    optimistic: true
    options:
      - Fully Down
      - Middle
      - Fully Up
    initial_option: Middle
    on_value: 
      then: 
          #- pulse_counter.set_total_pulses:
          #    id: motor_pulse_counter
          #    value: 0
          - lambda: |-
              auto call = id(servo_number).make_call();
              if( x == "Fully Down") {
                id(motor_run_start_time_seconds) = millis()/100;
                id(motor_pulse_counter).set_total_pulses(0);
                id(motor_running) = true;
                id(drv_phase).turn_off();
                id(drv_enable).turn_on();
                id(drv_enable).set_level(1);
                call.set_value(100);
                
              } else if (x == "Middle") {
                id(motor_pulse_counter).set_total_pulses(0);
                id(motor_running) = false;
                id(drv_enable).turn_off();
                call.set_value(0);
              } else {
                id(motor_run_start_time_seconds) = millis()/100;
                id(motor_pulse_counter).set_total_pulses(0);
                id(motor_running) = true;
                id(drv_phase).turn_on();
                id(drv_enable).turn_on();
                id(drv_enable).set_level(1);
                call.set_value(-100);
              }
              /////call.perform();
          #- delay: 5s
          #- lambda: |-
          #    id(drv_enable).turn_off();
  - platform: template
    name: "Sleep State"
    optimistic: true
    options:
      - Sleep
      - Awake
    initial_option: Awake
    #on_value:


            
number:
  - platform: template
    name: One Rotation Counts
    id: one_rotation_counts
    min_value: 0
    max_value: 3600
    step: 1
    initial_value: 240
    optimistic: true
  - platform: template
    name: Servo Control
    id: servo_number
    internal: true
    min_value: -100
    max_value: 100
    step: 1
    initial_value: 100
    optimistic: true
    set_action:
      then:
        - output.turn_on: pwm_output
        #- output.ledc.set_frequency:
        #    id: pwm_output
        #    frequency: "50Hz"
        #- output.set_level:
        #    id: pwm_output
        #    level: 50%
        - servo.write:
            id: my_servo
            level: !lambda 'return x / 100.0;'

servo:
  - id: my_servo
    output: pwm_output

# Example output platform
# On ESP32, use ledc output
output:
    #servo 
  - platform: ledc
    id: pwm_output
    pin: 13
    frequency: 50 Hz
    channel: 0
    #main driver motor PWM (enable pin)
  - platform: ledc
    id: drv_enable
    pin: 14
    frequency: 250 kHz
    channel: 2
    #main driver motor direction (phase pin)
  - platform: gpio
    id: drv_phase
    pin: 27