esphome:
  name: psc-2-v0-0-1
  friendly_name: psc-2-v0-0-1

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "T4cgBfpXv1FK0aT82OEUw3dui7qvC0ruZpt/5piKM+Y="
  services:
    - service: do_calibration_routine
      then:
        - lambda: |-
            id(motor_controller).do_calibration_routine();
    - service: set_forward_stop
      then:
        - lambda: |-
            id(motor_controller).set_forward_stop();
    - service: set_backward_stop
      then:
        - lambda: |-
            id(motor_controller).set_backward_stop();
    - service: set_calibration_status_to_true
      then:
        - lambda: |-
            id(motor_controller).set_calibration_status(true);


ota:
  password: "7e729b2b64c48f78ee27a4f3f4ebd097"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Psc-2-V0-0-1 Fallback Hotspot"
    password: "kB72nEI5N6Aa"

captive_portal:

######################################################

external_components:
  - source:
      type: local
      path: custom_components   
    components: [ ps_motor_controller ]    
#  - source:
#      type: git
#      url: https://github.com/ssieb/custom_components
#    components: [ desky ]    

spi:
  clk_pin: GPIO18
  miso_pin: GPIO19
  mosi_pin: GPIO23

ps_motor_controller:
  id: motor_controller
  cs_pin: GPIO27

select:
   - platform: template
     name: "Cover Position"
     optimistic: true
     options:
       - "0%"
       - "10%"
       - "20%"
       - "30%"
       - "40%"
       - "50%"
       - "60%"
       - "70%"
       - "80%"
       - "90%"
       - "100%"
     initial_option: "50%"
     on_value:
       then:
           #- pulse_counter.set_total_pulses:
           #    id: motor_pulse_counter
           #    value: 0
           - lambda: |-
              if(x == "0%") {
                id(motor_controller).seek_position(0);
              } else if (x == "10%") {
                id(motor_controller).seek_position(1);
              } else if( x == "20%") {
                id(motor_controller).seek_position(2);
              } else if( x == "30%") {
                id(motor_controller).seek_position(3);
              } else if( x == "40%") {
                id(motor_controller).seek_position(4);
              } else if( x == "50%") {
                id(motor_controller).seek_position(5);
              } else if( x == "60%") {
                id(motor_controller).seek_position(6);
              } else if( x == "70%") {
                id(motor_controller).seek_position(7);
              } else if( x == "80%") {
                id(motor_controller).seek_position(8);
              } else if( x == "90%") {
                id(motor_controller).seek_position(9);
              } else if( x == "100%") {
                id(motor_controller).seek_position(10);
              }

sensor:
  - platform: template
    name: "Current Position"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
      return id(motor_controller).get_current_position();
    update_interval: 10s

#uart:
#  - id: desk_uart
#    baud_rate: 9600
#    rx_pin: 3

#desky:
#  #uart_id: desk_uart  (optional, unless multiple uarts are defined)
#  id: my_desky
#  height:  # optional sensor publishing the current height
#    name: Desk Height
#    # any other sensor options
#  up:    # optional <pin> config
#    number: 4
#    inverted: true  # probably needed
#  down:  # optional <pin> config
#    number: 5
#    inverted: true  # probably needed
#  request:  # optional <pin> config to request height updates at boot
#    number: 27
#    inverted: true  # probably needed
#  stopping_distance: 15  # optional distance from target to turn off moving, default 15
#  timeout: 15s  # optional time limit for moving, default is none


